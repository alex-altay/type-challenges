// ============= Test Cases =============
import type { Equal, Expect } from '../test-utils'

type cases = [
  Expect<Equal<CapitalizeWords<'foobar'>, 'Foobar'>>,
  Expect<Equal<CapitalizeWords<'FOOBAR'>, 'FOOBAR'>>,
  Expect<Equal<CapitalizeWords<'foo bar'>, 'Foo Bar'>>,
  Expect<Equal<CapitalizeWords<'foo bar hello world'>, 'Foo Bar Hello World'>>,
  Expect<Equal<CapitalizeWords<'foo bar.hello,world'>, 'Foo Bar.Hello,World'>>,
  Expect<Equal<CapitalizeWords<'aa!bb@cc#dd$ee%ff^gg&hh*ii(jj)kk_ll+mm{nn}oo|ppü§£qq'>, 'Aa!Bb@Cc#Dd$Ee%Ff^Gg&Hh*Ii(Jj)Kk_Ll+Mm{Nn}Oo|Ppü§£Qq'>>,
  Expect<Equal<CapitalizeWords<''>, ''>>,
]


// ============= Your Code Here =============
// –ú–æ—ë –ø–µ—Ä–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Å–µ–º –∫—Ä–æ–º–µ —ç–º–æ–¥–∑–∏
// type CapitalizeWords<T extends string, shouldCapitalizeNext extends boolean = true> = 
//   T extends `${infer Head}${infer Rest}` 
//     ? Head extends Capitalize<Head> & Lowercase<Head>
//       ? `${Head}${CapitalizeWords<Rest, true>}`
//       : shouldCapitalizeNext extends true
//         ? `${Capitalize<Head>}${CapitalizeWords<Rest, false>}`
//         : `${Head}${CapitalizeWords<Rest, false>}`
//     : T

// –í —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞ —Å —ç–º–æ–¥–∑–∏?
type t = CapitalizeWords<'ü§£qq'> // –í–Ω–µ–∑–∞–ø–Ω–æ `\uD83E\uDD23${any}`
// –≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Ç–æ–º—É, —á—Ç–æ –¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞ –≤ —Ç–∞–π–ø—Å–∫—Ä–∏–ø—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ, 
// –∞ —ç–º–æ–¥–∑–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞

type StringToUnion<T extends string> = 
  T extends `${infer Head}${infer Rest}` 
  ? Head | Uppercase<Head> | StringToUnion<Rest>
  : never
type LetterUnion = StringToUnion<'abcdefghijklmnopqrstuvwxyz'> // 'a' | 'A' | 'b' | 'B' etc


// –†–µ—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤–∏–¥–µ–æ, –¥–µ–ª–∞–µ—Ç –≤—Å—ë —Ç–æ–∂–µ —Å–∞–º–æ–µ
type CapitalizeWords<T extends string, Acc extends string = ''> = 
  T extends `${infer Head}${infer Rest}`                   // –î–µ–ª–∏–º —Å—Ç—Ä–æ–∫—É
  ? Acc extends `${string}${LetterUnion}`                  // –°–º–æ—Ç—Ä–∏–º –±—ã–ª –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∏–º–≤–æ–ª –±—É–∫–≤–æ–π 
    ? CapitalizeWords<Rest, `${Acc}${Head}`>               // –ï—Å–ª–∏ –±—ã–ª, –¥–≤–∏–∂–µ–º—Å—è –¥–∞–ª—å—à–µ  
    : CapitalizeWords<Rest, `${Acc}${Capitalize<Head>}`>   // –ï—Å–ª–∏ –Ω–µ –±—ã–ª, –¥–µ–ª–∞–µ–º —Ç–µ–∫—É—â–π —Å–∏–º–≤–æ–ª –∑–∞–≥–ª–∞–≤–Ω—ã–º
  : Acc                                                    // –ö–æ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ –∫–æ–Ω—á–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å

// –ü–æ—á–µ–º—É —Ç–∞–π–ø—Å–∫—Ä–∏–ø—Ç –¥–µ–ª–∏—Ç —ç–º–æ–¥–∑–∏ –Ω–∞ —Å–∏–º–≤–æ–ª—ã –≤ –ø–µ—Ä–≤–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ, –∞ –∑–¥–µ—Å—å –Ω–µ –¥–µ–ª–∏—Ç –æ–¥–Ω–æ–º—É –±–æ–≥—É –∏–∑–≤–µ—Å—Ç–Ω–æ
